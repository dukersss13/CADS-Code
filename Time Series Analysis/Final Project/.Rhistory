model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
checkresiduals(model)
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
prices_100_days = arimaFunction(high, 100)
prices_100_days$mean[[100]]
#futurePrice shows the forecast for Bitcoin price for the next 100 days.
#The price can range from ~$5k to $14k with an 80% confidence interval
#or $2.5k to $16.5k, a bigger range with a 95% confidence interval.
#The actual forecast is $9.5k.
#Now I want to compare the ARIMA(2,1,2) forecast to H.W Double Exponential Smoothing
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
pred = Holt(high, 100)
pred
pred$mean[100]
#Further analysis on the H.W model:
#Alpha = 1 tells us the future price has no depedence on the previous level &
#with a small Beta, it shows the prices of BTC heavily depend on the trend of the movements.
#The price recorded on 5/19 is $9685. I want to compare prediction vs. actual:
may19 = Holt(high, 3)
may19$mean[[3]]
#Prediction is $9677 vs. actual: $9675
pred$mean[[3]]
#ARIMA(2,1,2) predicted $9562 as the price for 5/19/20
#So far, we can see adding a trend (BETA) component to Double Exp. Smoothing
#helps us make a better prediction.
#Now I want to use the same process to analyze Litecoin, another type of altcoin.
data2 = read.table("litecoin.csv", sep = ',', header = TRUE)
lite = rev(data2[,3])
litecoin = ts(lite)
plot(litecoin, main = "Litecoin Prices")
#Similar to BTC, Litecoin doesn't seem to show stationarity.
lite100 = arimaFunction(litecoin, 100)
lite100
lite100$upper[100]
lite_HW = Holt(lite, 100)
lite_HW$upper[[100]]
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("INO", "CODX")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(INO, CODX)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
ino = closing[[1]]
codx = closing[[2]]
ino100 = arimaFunction(ino, 30)
ino100
HW.ino = Holt(ino, 30)
HW.ino$mean[[30]]
#HW.ino$upper
codx100 = arimaFunction(codx,30)
codx100
HW.codx = Holt(codx, 30)
HW.codx
HW.ino$mean[[30]]
HW.ino
setwd("C:/Users/Duker/Desktop/Chapman/Spring 2020/CS611/Final Project")
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
#For my project, I chose to study the trends of cryptocurrency and stock prices.
#My goal is to determine a model of best fit, use it to forecast future prices &
#compare those results to the Exponential Smoothing forecasting technique.
#BTC (Bitcoin) prices from June 2019 to 5/16/2020
data = read.table("bitcoin.csv", sep = ",", header = T)
attach(data)
names(data)
# I choose to analyze the highest price of the day.
bitcoin = ts(data, start = c(1,length(data),1))
high = rev(bitcoin[,3])
plot(high, type = 'l', main = 'Highest Bitcoin Price from 6/19 - 5/20')
# As we can see, the TS plot doesn't necessarily show stationarity.
# To make sure we're working with a stationary data set, I want to difference it once.
high2 = diff(high,1)
par(mfrow = c(1,2))
plot(high2, type = 'l', main = 'Bitcoin Price, d = 1')
# The difference plot looks more stationary, we'll assume the spikes are outliers
# and view them as noise.
pacf(high2)
# The PACF suggests the first 2 lags are significant.
# The rest of the lags' correlations may be caused a factor of seasonality.
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
prices_100_days = arimaFunction(high, 100)
prices_100_days$mean[[100]]
prices_100_days
#futurePrice shows the forecast for Bitcoin price for the next 100 days.
#The price can range from ~$5k to $14k with an 80% confidence interval
#or $2.5k to $16.5k, a bigger range with a 95% confidence interval.
#The actual forecast is $9.5k.
#Now I want to compare the ARIMA(2,1,2) forecast to H.W Double Exponential Smoothing
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
pred = Holt(high, 100)
pred
pred$mean[100]
#Further analysis on the H.W model:
#Alpha = 1 tells us the future price has no depedence on the previous level &
#with a small Beta, it shows the prices of BTC heavily depend on the trend of the movements.
#The price recorded on 5/19 is $9685. I want to compare prediction vs. actual:
may19 = Holt(high, 3)
may19$mean[[3]]
#Prediction is $9677 vs. actual: $9675
pred$mean[[3]]
#ARIMA(2,1,2) predicted $9562 as the price for 5/19/20
#So far, we can see adding a trend (BETA) component to Double Exp. Smoothing
#helps us make a better prediction.
#Now I want to use the same process to analyze Litecoin, another type of altcoin.
data2 = read.table("litecoin.csv", sep = ',', header = TRUE)
lite = rev(data2[,3])
litecoin = ts(lite)
plot(litecoin, main = "Litecoin Prices")
#Similar to BTC, Litecoin doesn't seem to show stationarity.
lite100 = arimaFunction(litecoin, 100)
lite100
lite100$upper[100]
lite_HW = Holt(lite, 100)
lite_HW$upper[[100]]
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("INO", "CODX")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(INO, CODX)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
ino = closing[[1]]
codx = closing[[2]]
acf(ino)
pacf(ino)
ino100 = arimaFunction(ino, 30)
ino100
HW.ino = Holt(ino, 30)
HW.ino
#HW.ino$upper
# Analysis on Inovio stock prices:
# Auto.arima suggests an AR model of order 3 and 1 difference, no MA part needed.
# The HW command provides a more flexible forecast with wider ranges than ARIMA.
# This could be simply because HW uses Double Exponential Smoothing & considers
# the trend of the data while ARIMA only considers the regression of the previous lags.
codx100 = arimaFunction(codx,30)
codx100
HW.codx = Holt(codx, 30)
HW.codx
# With all these models, I took away that most TS data sets will not be stationary.
# To successfully model and forecast, usually a difference or 2 has to be done to
# ensure stationarity.
# Looking at the residuals for these TS data sets, the errors show a constant
# variance over time as they are all normally distributed with mean 0.
# As we all know, stocks and cryptocurrencies are always more volatile and
# unpredictable than typical data sets such as yearly rain. Thus, there was not
# a seasonal component I could've incorporated in the HoltWinters function.
HW.codx
HW.ino
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
#Now I want to compare the ARIMA(2,1,2) forecast to H.W Double Exponential Smoothing
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
pred = Holt(high, 100)
pred
pred$mean[100]
#The price recorded on 5/19 is $9685. I want to compare prediction vs. actual:
may19 = Holt(high, 3)
may19$mean[[3]]
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "NIO")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "NIO")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
library(forecast)
library(tidyverse)
library(sarima)
library(TSA)
stocks_list = c("WKHS", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, NIO)
stocks_list = c("WKHS", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, NIO)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, NIO)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
firstStock = closing[[1]]
closing = lapply(stocks, function(s) {
return(s[, 4])
})
stocks = list(WKHS, NIO)
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
firstStock = closing[[1]]
secondStock = closing[[2]]
acf(firstStock)
pacf(firstStock)
firstStock100 = arimaFunction(firstStock, 30)
firstStock100
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
firstStock100 = arimaFunction(firstStock, 30)
firstStock100
WKHS30 = arimaFunction(firstStock, 30)
WKHS30
HW.firstStock = Holt(firstStock, 30)
HW.firstStock
HW.WKHS = Holt(firstStock, 30)
#Now I want to compare the ARIMA(2,1,2) forecast to H.W Double Exponential Smoothing
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
WKHS = closing[[1]]
acf(firstStock)
pacf(firstStock)
WKHS30 = arimaFunction(firstStock, 30)
WKHS30
HW.WKHS30 = Holt(firstStock, 30)
HW.WKHS30
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SRNE = closing[[3]]
acf(SRNE)
pacf(SRNE)
WKHS30 = arimaFunction(SRNE, 30)
WKHS30
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
HW.SRNE30[[30]]
HW.SRNE30[30]
HW.SRNE30[2]
HW.SRNE30$mean[[30]]
HW.SRNE30$high[[30]]
HW.SRNE30
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SRNE = closing[[3]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SRNE = closing[[3]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[1]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[2]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[4]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[5]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("SQ", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(SQ, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SQ = closing[[4]]
acf(SQ)
pacf(SQ)
SQ30 = arimaFunction(SQ, 30)
SQ30
HW.SQ30 = Holt(SQ, 30)
HW.SQ30
stocks = list(SQ, SHLL, SRNE, SQ, AAPL)
SQ = closing[[5]]
acf(SQ)
pacf(SQ)
SQ30 = arimaFunction(SQ, 30)
SQ30
HW.SQ30 = Holt(SQ, 30)
HW.SQ30
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("SQ", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(SQ, SHLL, SRNE, SQ, WKHS)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SQ = closing[[4]]
acf(SQ)
pacf(SQ)
SQ30 = arimaFunction(SQ, 30)
SQ30
HW.SQ30 = Holt(SQ, 30)
HW.SQ30
SQ = closing[[5]]
acf(SQ)
pacf(SQ)
SQ30 = arimaFunction(SQ, 30)
SQ30
HW.SQ30 = Holt(SQ, 30)
HW.SQ30
SQ = closing[[4]]
acf(SQ)
pacf(SQ)
SQ30 = arimaFunction(SQ, 30)
SQ30
HW.SQ30 = Holt(SQ, 30)
HW.SQ30
