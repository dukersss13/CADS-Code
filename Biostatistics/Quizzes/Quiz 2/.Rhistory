})
# t.test2 text ####
output$t_test2 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,3]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect2, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect2, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# Pearson Scatter Plot ####
output$correlation = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
ggplot(filtered3(), aes(x = filtered3()[,2], y = filtered3()[,3])) +
geom_point(size = 3, color = "#56B4E9") +
geom_smooth(method = "lm", se = F, size = 0.8, color = "black") +
labs(title = paste("Police-Civilian Use of Force in", input$countySelect3),
subtitle = paste("with Pearson Correlation:", round(cor(filtered3()[,2],filtered3()[,3]),4)),
x = names(filtered3()[2]), y = names(filtered3()[3])) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5))
})
# Kendall Matrix ####
output$corrMatrix = renderPlot({
if(is.null(input$countySelect3)) return(NULL)
filtered4 = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
filtered4 = filtered4[, colSums(filtered4 != 0) > 0]
ggcorrplot(cor(filtered4[1:as.integer(length(filtered4)/2)],
filtered4[as.integer(length(filtered4)/2+1):length(filtered4)],
method = "kendall"),
hc.order = T, lab= T,
ggtheme = ggplot2::theme_light, outline.color = "white",
title = paste("Police(x) - Civilian(y) Violence in", input$countySelect3,
"\n (Kendall Rank Correlation Matrix)"),
colors = c("#6D9EC1", "white", "#E46726"),
legend.title = "Kendall Correlation") +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
M = 9000
sd = 260
n = 169
?t.test
?confint
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Module2 Publish')
library(pROC)
library(dplyr)
library(MASS)
library(AER)
library(ROSE)
library(pROC)
library(mlbench)
library(foreign)
d = get(data(BostonHousing))
dim(d)
names(d)
threshold = mean(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
base = glm(medv~., data = d, family = "binomial")
threshold = mean(medv)
threshold = median(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
pp1 = predict(final1, type = "response")
predicted.values = predict(final1, d$medv)
roc.curve(medv, pp1)
predicted.values = predict(final1, d)
predicted.values
predicted.values = predict(final1, d$medv)
predicted.values = predict(final1, d$medv)
str(d$medv)
predicted.values = predict(final1, as.factor(d$medv))
predicted.values
predicted.values = predict(pp1, as.factor(d$medv))
roc.curve(medv, pp1)
roc = roc.curve(medv, pp1)
names(roc)
roc$thresholds
roc$Call
roc$auc
roc$false.positive.rate
max(roc$true.positive.rate)
index(max(roc$true.positive.rate) & min(roc$false.positive.rate))
roc$true.positive.rate
roc$false.positive.rate
c = cbind(roc$true.positive.rate, roc$false.positive.rate)
c
c %>% filter(max(c[,1]) & min(c[,2]))
which.max(roc$true.positive.rate - roc$false.positive.rate)
roc$thresholds[55]
best_threshold_index = which.max(roc$true.positive.rate - roc$false.positive.rate)
optimal.threshold = roc$thresholds[best_threshold_index]
install.packages("faraway")
library(faraway)
library(ROSE)
library(AER)
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 624/Quizzes/Quiz 2")
?wcgs
data = load(wcgs)
d = data(wcgs)
force(wcgs)
View(wcgs)
str(d)
data(wcgs)
str(wcgs)
dim(wcgs)
summary(wcgs)
na.omit(wcgs)
dim(wcgs)
new.wcgs = na.omit(wcgs)
dim(new.wcgs)
attach(new.wcgs)
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
View(new.wcgs)
behave = as.factor(behave)
new.wcgs$behave = as.factor(behave)
new.wcgs$dibep = as.factor(new.wcgs$dibep)
View(new.wcgs)
new.wcgs = as.factor(new.wcgs)
data(wcgs)
library(faraway)
library(ROSE)
library(AER)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
summary(behave)
new.wcgs[behave == "A1"]$behave = 0
new.wcgs[new.wcgs$behave == "A1"]$behave = 0
new.wcgs[new.wcgs$behave == "A1",]$behave = 0
new.wcgs$arcus = ifelse(new.wcgs$arcus == "absent", 0, 1)
View(new.wcgs)
new.wcgs$typechd = ifelse(new.wcgs$typechd == "none", 0, 1)
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
library(faraway)
library(ROSE)
library(AER)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
View(new.wcgs)
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
new.wcgs$behave = if(new.wcgs$behave == "A1"){
new.wcgs$behave == 0
}
values = levels(behave)
values
library(plyr)
seq(length(values))
mapvalues(new.wcgs$behave, from = values, to = seq(length(values)))
new.wcgs$behave = mapvalues(new.wcgs$behave, from = values, to = seq(length(values)))
values = levels(behave)
values = levels(factor(behave))
new.wcgs$behave = mapvalues(new.wcgs$behave, from = values, to = seq(length(values)))
library(faraway)
library(ROSE)
library(AER)
library(plyr)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
new.wcgs$behave = mapvalues(factor(new.wcgs$behave), from = values, to = seq(length(values)))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
library(MASS)
final1 = stepAIC(base)
library(dplyr)
new.wcgs = new.wcgs %>% select(-c(timechd, typechd, behave))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
View(wcgs)
# c ####
pp1 = predict(final1, type = "response")
roc = roc.curve(dibep, pp1)
roc.curve(dibep, pp1)
roc.curve(dibep, pp1)
roc.curve(dibep, pp1)
summary(final1)
roc = roc.curve(dibep, pp1)
roc
# d ####
best_threshold_index = which.max(roc$true.positive.rate - roc$false.positive.rate)
roc$thresholds[best_threshold_index]
roc$thresholds[best_threshold_index]
# e ####
final2 = stepAIC(base, ~.^2, trace = 0)
final3 = stepAIC(base, ~.^3)
final3 = stepAIC(base, ~.^3, trace = 0)
roc1 = roc.curve(dibep, pp1)
roc1
pp2 = predict(final2, type = "response")
roc2 = roc.curve(dibep, pp2)
roc2
roc3 = roc.curve(dibep, pp3)
pp3 = predict(final3, type = "response")
roc3 = roc.curve(dibep, pp3)
roc3
roc3
roc1
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
values = levels(behave)
new.wcgs$behave = mapvalues(factor(new.wcgs$behave), from = values, to = seq(length(values)))
new.wcgs = new.wcgs %>% select(-c(typechd))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
# c ####
pp1 = predict(final1, type = "response")
roc1 = roc.curve(dibep, pp1)
roc1
new.wcgs = new.wcgs %>% select(-c(behave))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
# c ####
pp1 = predict(final1, type = "response")
roc1 = roc.curve(dibep, pp1)
roc1
# e ####
final2 = stepAIC(base, ~.^2, trace = 0)
final3 = stepAIC(base, ~.^3, trace = 0)
pp2 = predict(final2, type = "response")
roc2 = roc.curve(dibep, pp2)
roc2
library(faraway)
library(ROSE)
library(AER)
library(plyr)
library(MASS)
library(dplyr)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
values = levels(behave)
new.wcgs$behave = mapvalues(factor(new.wcgs$behave), from = values, to = seq(length(values)))
new.wcgs = new.wcgs %>% select(-c(typchd69, timechd, behave))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
# The model was able to predict dibep best by using age + height + sdp + chol + cigs and chd.
# Quick overview of the coefficients: All of the features chosen are statistiscally significant
# with the exception of chol.
# The coefficients mean for example: a unit increase in age (a continuous var) will increase the
# log(odds of being passive) by 0.027.
# Interpreation for a binary feature: If the person has coronary heart disease (1) then his
# log(odds of being passive) will increase by 0.00126.
# c ####
pp1 = predict(final1, type = "response")
roc1 = roc.curve(dibep, pp1)
roc1
# The AUC obtained under the ROC is 0.596. This is obviously not an ideal AUC score we're striving
# for. However, given the limited time of the exam, I cannot afford to further investigate to why
# the model yielded an undesireable AUC score.
# d ####
best_threshold_index = which.max(roc1$true.positive.rate - roc1$false.positive.rate)
roc1$thresholds[best_threshold_index]
# e ####
final2 = stepAIC(base, ~.^2, trace = 0)
final3 = stepAIC(base, ~.^3, trace = 0)
pp2 = predict(final2, type = "response")
roc2 = roc.curve(dibep, pp2)
roc2
pp3 = predict(final3, type = "response")
roc3 = roc.curve(dibep, pp3)
roc3
# The 2 new models yield the same results in terms of the AUC score.
# They both performed better than the original log model that did not have interactions.
# f ####
# The first logistic model performed poorly, only having an AUC of 0.596. The following 2 interactive
# models performed slightly better. A guess on this improvement could be because some features
# are dependent on one another, thus 2 & 3 way interactions between them will yield better results.
# If given more time, an approach I could do to improve the accuracy + AUC of all these models
# could be to look more into the variables' meanings & do a better job of feature selecting.
library(faraway)
library(ROSE)
library(AER)
library(plyr)
library(MASS)
library(dplyr)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
values = levels(behave)
new.wcgs$behave = mapvalues(factor(new.wcgs$behave), from = values, to = seq(length(values)))
new.wcgs = new.wcgs %>% select(-c(typchd69, timechd, behave))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
# c ####
pp1 = predict(final1, type = "response")
roc1 = roc.curve(dibep, pp1)
roc1
library(faraway)
library(ROSE)
library(AER)
library(plyr)
library(MASS)
library(dplyr)
data(wcgs)
# Problem 1 ####
# a ####
str(wcgs)
new.wcgs = na.omit(wcgs)
attach(new.wcgs)
new.wcgs$arcus = as.factor(ifelse(new.wcgs$arcus == "absent", 0, 1))
new.wcgs$typechd = as.factor(ifelse(new.wcgs$typechd == "none", 0, 1))
new.wcgs$chd = as.factor(ifelse(new.wcgs$chd == "no", 0, 1))
new.wcgs$dibep = as.factor(ifelse(new.wcgs$dibep == "A", 0, 1))
values = levels(behave)
new.wcgs$behave = mapvalues(factor(new.wcgs$behave), from = values, to = seq(length(values)))
new.wcgs = new.wcgs %>% select(-c(timechd, typechd, behave))
# b ####
base = glm(dibep~., data = new.wcgs, family = "binomial")
final1 = stepAIC(base)
summary(final1)
# The model was able to predict dibep best by using age + height + sdp + chol + cigs and chd.
# Quick overview of the coefficients: All of the features chosen are statistiscally significant
# with the exception of chol.
# The coefficients mean for example: a unit increase in age (a continuous var) will increase the
# log(odds of being passive) by 0.027.
# Interpreation for a binary feature: If the person has coronary heart disease (1) then his
# log(odds of being passive) will increase by 0.00126.
# c ####
pp1 = predict(final1, type = "response")
roc1 = roc.curve(dibep, pp1)
roc1
# The AUC obtained under the ROC is 0.596. This is obviously not an ideal AUC score we're striving
# for. However, given the limited time of the exam, I cannot afford to further investigate to why
# the model yielded an undesireable AUC score.
# d ####
best_threshold_index = which.max(roc1$true.positive.rate - roc1$false.positive.rate)
roc1$thresholds[best_threshold_index]
# e ####
final2 = stepAIC(base, ~.^2, trace = 0)
final3 = stepAIC(base, ~.^3, trace = 0)
pp2 = predict(final2, type = "response")
roc2 = roc.curve(dibep, pp2)
roc2
pp3 = predict(final3, type = "response")
roc3 = roc.curve(dibep, pp3)
roc3
# The 2 new models yield the same results in terms of the AUC score.
# They both performed better than the original log model that did not have interactions.
# f ####
# The first logistic model performed poorly, only having an AUC of 0.596. The following 2 interactive
# models performed slightly better. A guess on this improvement could be because some features
# are dependent on one another, thus 2 & 3 way interactions between them will yield better results.
# If given more time, an approach I could do to improve the accuracy + AUC of all these models
# could be to look more into the variables' meanings & do a better job of feature selecting.
roc3
d2 = read.csv("https://data.princeton.edu/wws509/datasets/ships.dat")
View(d2)
d2 = read.dta("https://data.princeton.edu/wws509/datasets/ships.dat")
library(foreign)
d2 = read.dta("https://data.princeton.edu/wws509/datasets/ships.dat")
d2 = read.table("https://data.princeton.edu/wws509/datasets/ships.dat")
View(d2)
names(d2)
str(d2)
d2$construction = mapvalues(factor(d2$construction), from = levels(d2$construction),
to = seq(length(levels(d2$construction))))
d2$operation = mapvalues(factor(d2$operation), from = levels(d2$operation),
to = seq(length(levels(d2$operation))))
View(d2)
str(d2)
glm( damage ~ type, offset(log(months)),data=d, family=poisson)
d = read.table("https://data.princeton.edu/wws509/datasets/ships.dat")
names(d)
str(d)
d$construction = mapvalues(factor(d$construction), from = levels(d$construction),
to = seq(length(levels(d$construction))))
d$operation = mapvalues(factor(d$operation), from = levels(d$operation),
to = seq(length(levels(d$operation))))
View(d)
d = read.table("https://data.princeton.edu/wws509/datasets/ships.dat", header = T)
poisson.base = glm(damage ~ type, offset(log(months)), data=d, family = poisson)
View(poisson.base)
poisson.final = stepAIC(poisson.base, trace = 0)
summary(poisson.final)
poisson.base = glm(damage~., offset(log(months)), data = d, family = poisson)
poisson.final = stepAIC(poisson.base, trace = 0)
summary(poisson.final)
d$construction = mapvalues(factor(d$construction), from = levels(d$construction),
to = seq(length(levels(d$construction))))
d$operation = mapvalues(factor(d$operation), from = levels(d$operation),
to = seq(length(levels(d$operation))))
poisson.base = glm(damage~., offset(log(months)), data = d, family = poisson)
poisson.final = stepAIC(poisson.base, trace = 0)
summary(poisson.final)
d = read.table("https://data.princeton.edu/wws509/datasets/ships.dat")
names(d)
str(d)
poisson.base = glm(damage~., offset(log(months)), data = d, family = poisson)
poisson.final = stepAIC(poisson.base, trace = 0)
summary(poisson.final)
# b ####
1-pchisq(poisson.final$deviance, poisson.final$df.residual)
# c ####
paste0(round(((exp(summary(poisson.final)$coef[,1]))-1)*100,3),"%")
# c ####
round(exp(summary(poisson.final)$coef[,1]),3)
# c ####
round(exp(summary(poisson.final)$coef[,1]), 3)
# c ####
disperstiontest(poisson.final)
library(faraway)
library(ROSE)
library(AER)
library(plyr)
library(MASS)
library(dplyr)
library(foreign)
# c ####
disperstiontest(poisson.final)
# c ####
dispersiontest(poisson.final)
# d ####
quasi.poisson =  glm(possion.final$call, family = quasipoisson, data = d)
poisson.final$call
# d ####
quasi.poisson =  glm(poisson.final$call, family = quasipoisson, data = d)
summary(quasi.poisson)
summary(poisson.final)
summary(quasi.poisson)
summary(quasi.poisson)
summary(poisson.final)
summary(poisson.final)
summary(quasi.poisson)
1-pchisq(quasi.poisson$deviance, quasi.poisson$df.residual)
