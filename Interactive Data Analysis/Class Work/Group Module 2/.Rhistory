choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
library(dplyr)
library(shiny)
install.packges("dplyr")
install.packages("dplyr")
install.packages("dplyr")
server = function(input, output){
output$plot = renderPlot({
})
}
shinyApp(ui = ui, server = server)
m1 = 190
m1 = 190, m2 = 275
m1 = 190
m2 = 275
n = 45
multinominCL
?multinominCL
?multinominCI
?multinomCI
t.test(x1$x1, conf.level = 0.95)
# Problem 2 ####
# Pg268 5.20 ####
library(ellipse)
m1 = 190
m2 = 275
n = 45
x1 = data.frame("x1" = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188))
x2 = data.frame("x2" = c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258))
x1bar = mean(x1[,1])
x2bar = mean(x2[,1])
cor.coeff = cor(cbind(x1,x2))
plot(ellipse(cor.coeff))
t.test(x1$x1, conf.level = 0.95)
?t.test
confint(x1$x1)
confint(x1)
t.test(x1$x1, method = 'bonferroni')
install.packages("multcomp")
library(multcomp)
?simint
??simint
simint(x1)
?t.test
t.test(x1$x1, conf.level = 0.95)
t.test(x2$x2, conf.level = 0.95)
# 2b ####
tail_t.test = t.test(x1$x1, conf.level = 0.95)
names(tail_t.test)
tail_t.test$conf.int
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int[[1]])
paste0("The 95% T^2 conf. interval for x1 is [", tail_t.test$conf.int[[1]],",",
tail_t.test$conf.int[[2]],"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],4),",",
round(tail_t.test$conf.int[[2]],4),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing.t.test = t.test(x2$x2, conf.level = 0.95)
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3))
wing_t.test = t.test(x2$x2, conf.level = 0.95)
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3))
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
confint(x1$x1)
confint(x1[,1])
c1 = x1$x1
c1
confint(c1)
type(c1)
class(c1)
str(c1)
typeof(c1)
c1
list(c1)
typeof(c1)
c1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
c1
confint(c1)
?confint
t.test(x1$x1, conf.level = 0.95, method = 'bonferroni')
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
confint(x1)
install.packages("popKorn")
library(popKorn)
bonferroniIntervals(x1$x1, alpha = 0.05)
bonferroniIntervals(x1$x1, alpha = 0.05, k = 1)
bonferroniIntervals(x1$x1, alpha = 0.05, k = 2)
bonferroniIntervals(x1, alpha = 0.05, k = 1)
bonferroniIntervals(x1, alpha = 0.05)
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
# 2c ####
plot(lm(x2~x1))
# 2c ####
plot(lm(x2$x2~x1$x1))
# 2c ####
plot(lm(x2$x2~x1$x1), which = c(2))
# 2c ####
plot(lm(x2$x2~x1$x1), which = 2)
x1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
x2 =  c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258)
x1bar = mean(x1)
x2bar = mean(x2)
cor.coeff = cor(cbind(x1,x2))
View(cor.coeff)
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1$x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2$x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
# Problem 2 ####
# Pg268 5.20 ####
library(ellipse)
library(popKorn)
m1 = 190
m2 = 275
n = 45
x1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
x2 =  c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258)
x1bar = mean(x1)
x2bar = mean(x2)
cor.coeff = cor(cbind(x1,x2))
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
# No difference between the 2 intervals for x2 but x1's T^2 Interval is within
# x1's Bonf. Interval
# 2c ####
plot(lm(x2$x2~x1$x1), which = 2)
# 2c ####
plot(lm(x2~x1), which = 2)
# Problem 2 ####
# Pg268 5.20
library(ellipse)
library(popKorn)
library(foreign)
library(dplyr)
m1 = 190
m2 = 275
n = 45
q2.data = read.table("T5-12.dat")
x1 = q2.data$V1
x2 = q2.data$V2
x1bar = mean(x1)
x2bar = mean(x2)
S = cov(q2.data)
S.inv = solve(S)
cor.coeff = cor(cbind(x1,x2))
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),", ",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),", ",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
plot(x1, x2)
install.packages("mvdalab")
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
?cor
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
as.integer(7.5)
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
as.integer(7.5)
length(1:7)
length(8:15)
sussex = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
library(shiny)
library(dplyr)
library(reshape2)
library(ggplot2)
library(stringr)
library(ggcorrplot)
#setwd("C:/Users/520ha/Desktop/Chapman/2020 Fall/CS 614/Assignments/Group Module 2")
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2")
data = read.csv("UOF.csv")
# Select county and all percentage columns:
data = data %>%
select(county, starts_with('pct_')) %>%
select(-c("pct_officers_injured", "pct_subjects_injured"))
# Rename the percentage columns:
for(i in 2:dim(data)[2]){
split_names = str_split(names(data)[i],'_', simplify = TRUE)
if(length(split_names)==3){
names(data)[i] = paste("Percent", str_to_title(split_names[1,2]),
str_to_title(split_names[1,3]))
} else{
names(data)[i] = paste("Percent", str_to_title(split_names[1,2]))
}
}
data[is.na(data)] = 0
attach(data)
if (interactive()) {
ui = fluidPage(titlePanel("New Jersey Police Data"),
sidebarLayout(
sidebarPanel(radioButtons("corrInput","Show Correlation Graph",
choices = c("Yes","No"), selected = "No"),
conditionalPanel(condition = "input.corrInput == 'No'",
uiOutput("countyOutput1"),
uiOutput("countyOutput2")
),
conditionalPanel(condition = "input.corrInput == 'Yes'",
uiOutput("countyOutput")),
uiOutput("percentOutput1"),
uiOutput("percentOutput2")),
mainPanel(
conditionalPanel(
condition = "input.corrInput == 'No'",
textOutput('kendall'),
br(),
plotOutput("plot1"),
br(),
textOutput('t_test1'),
br(),
plotOutput("plot2"),
br(),
textOutput('t_test2'),
br()),
conditionalPanel(
condition = "input.corrInput == 'Yes'",
plotOutput("correlation"),
br(),
br(),
plotOutput("corrMatrix"))
)
)
)
}
server = function(input, output) {
filtered1 = reactive ({
if(is.null(input$countySelect1)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect1) %>%
select(county, input$percentSelect1, input$percentSelect2)
})
filtered2 = reactive ({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect2)%>%
select(county, input$percentSelect1, input$percentSelect2)
})
consolidate.df = reactive ({
rbind(filtered1(), filtered2())
})
filtered3 = reactive({
if(is.null(input$countySelect3)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
data %>%
filter(county %in% input$countySelect3) %>%
select(county, input$percentSelect1, input$percentSelect2)
})
output$countyOutput1 = renderUI ({
selectInput("countySelect1", "Select County 1",
choices = sort(unique(county)), selected = 'Atlantic')
})
output$countyOutput2 = renderUI({
dropdown2 = data %>% filter(!county %in% input$countySelect1)
selectInput("countySelect2", "Select County 2",
choices = sort(unique(dropdown2$county)),selected = 'Bergen')
})
output$percentOutput1 = renderUI ({
selectInput("percentSelect1", "Select Police Use of Force",
choices = names(data)[2:8],selected = "Percent Complaince Hold")
})
output$percentOutput2 = renderUI({
selectInput("percentSelect2", "Select Civilian Use of Force",
choices = names(data)[9:length(data)],selected = "Percent Hands Fists")
})
output$countyOutput = renderUI({
selectInput("countySelect3", "Select County to See Correlation",
choices = sort(unique(county)),selected = 'Atlantic')
})
output$plot1 = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
ggplot(consolidate.df(), aes(x = consolidate.df()[,2]  , y = ..density..)) +
geom_density(aes(color = county, fill = county), alpha = 0.2, size = 0.7) +
labs(x = names(consolidate.df())[2], y = "Density") +
guides(fill = guide_legend(title= "County"),
color = guide_legend(title = "County")) +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
})
output$plot2 = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect2)) return(NULL)
ggplot(consolidate.df(), aes(x = consolidate.df()[,3] , y = ..density..)) +
geom_density(aes(color = county, fill = county), alpha = 0.2, size = 0.7) +
labs(x = names(consolidate.df())[3], y = "Density") +
guides(fill = guide_legend(title= "County"),
color = guide_legend(title = "County")) +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14))
})
output$kendall = renderText({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
kd = round(cor(filtered3()[,2],filtered3()[,3],method = "kendall"),4)
paste("Kendall Rank Coefficient:", kd)
})
output$t_test1 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,2]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect1, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect1, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
output$t_test2 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,3]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect2, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect2, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
output$correlation = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
ggplot(filtered3(), aes(x = filtered3()[,2], y = filtered3()[,3])) +
geom_point(size = 2) + geom_smooth(method = "lm", se = F) +
labs(title = paste("Pearson Correlation:", round(cor(filtered3()[,2],filtered3()[,3]),4)),
x = names(filtered3()[2]), y = names(filtered3()[3])) +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.margin = unit(c(0,2,0,2), "cm"))
})
output$corrMatrix = renderPlot({
if(is.null(input$countySelect3)) return(NULL)
filtered4 = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
filtered4 = filtered4[, colSums(filtered4 != 0) > 0]
ggcorrplot(cor(filtered4[1:as.integer(length(filtered4)/2)],
filtered4[as.integer(length(filtered4)/2+1):length(filtered4)],
method = "kendall"),
hc.order = T, lab= T,
ggtheme = ggplot2::theme_gray, outline.color = "white",
title = paste("Police-Civilian Violence Correlation Matrix in", input$countySelect3),
colors = c("#6D9EC1", "white", "#E46726"),
legend.title = "Kendall Correlation")
})
}
shinyApp(ui = ui, server = server)
sussex = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
sussex = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
sussex = data %>%
filter(county == "Sussex") %>%
select(-county)
View(sussex)
sussex = sussex[, colSums(sussex != 0) > 0]
sussex = data %>%
filter(county == "Sussex") %>%
select(-county)
View(sussex)
sussex = sussex[, colSums(sussex != 0) > 0]
cor(sussex[1:as.integer(length(sussex)/2])],
sussex[as.integer(length(filtered4)/2+1):length(filtered4)])
cor(sussex[1:as.integer(length(sussex)/2)],
sussex[as.integer(length(filtered4)/2+1):length(filtered4)])
cor(sussex[1:as.integer(length(sussex)/2)],
sussex[as.integer(length(sussex)/2+1):length(sussex)])
c = cor(sussex[1:as.integer(length(sussex)/2)],
sussex[as.integer(length(sussex)/2+1):length(sussex)])
View(c)
shinyApp(ui = ui, server = server)
