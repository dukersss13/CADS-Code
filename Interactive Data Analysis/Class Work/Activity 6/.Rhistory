labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.25,0.85),
legend.key.size = unit(0.03, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.25,0.85),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.2,0.85),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.2,1),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.2,0.9),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.2,0.95),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.15,0.99),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.999),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.95),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
scale_color_manual(name = "Pos", color = c("red", "green", "blue")) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(col = variable)) +
scale_color_manual(name = "Pos") +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2) +
scale_color_manual(name = "Pos") +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(color = variable)) +
geom_point(size = 2) +
scale_color_manual(name = "Pos") +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, color = variable) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
names(myColors) <- levels(dat$grp)
names(myColors) <- levels(df.2$variable)
names(myColors) <-
colScale <- scale_colour_manual(name = "grp",values = levels(df.2$variable))
colScale <- scale_colour_manual(name = "grp",values = levels(df.2$variable))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm")) + colScale
levels(df.2$variable)
scale_colour_manual(name = "grp",values = levels(df.2$variable))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos",values = levels(df.2$variable)) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", colors = c("red", "green", "blue"),
values = levels(df.2$variable)) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", color = c("red", "green", "blue"),
values = levels(df.2$variable)) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = c("red", "green", "blue"),
values = levels(df.2$variable)) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = c("red", "green", "blue")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos") +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = variable) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = levels(df.2$variable)) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = c("r", "g", "b")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = c("red", "green", "blue")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos", alpha = 0.5,
values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, alpha = 0.5, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos",
values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, alpha = 0.5, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos",
values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, alpha = 0.6, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos",
values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
vv
vv$diagconfig
vv$diagconfig[1,]
library(MASS)
library(ggplot2)
data(mpg)
head(mpg)
mpg.var = (mpg['cty'] + mpg['hwy'])/2
mpg = cbind(mpg, mpg.var)
names(mpg)[12] = 'avg.mpg'
drop = c("cty","hwy")
df = mpg[,!(names(mpg) %in% drop)]
dim(df)
names(df)
summary(df)
str(df)
attach(df)
hist(displ, freq = F)
hist(year, freq = F)
hist(cyl, freq = F)
boxplot(avg.mpg ~ cyl)
boxplot(avg.mpg ~ manufacturer)
boxplot(avg.mpg ~ trans)
boxplot(avg.mpg ~ model)
boxplot(avg.mpg ~ manufacturer)
mlm = lm(avg.mpg ~., data = df)
stepAIC(mlm)
best.lm = lm(model + displ + year + cyl + fl + class, data = df)
plot(best.lm, which = c(1))
best.lm = lm(model + displ + year + cyl + fl + class, data = df)
best.lm = lm(avg.mpg~ model + displ + year + cyl + fl + class, data = df)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
library(dplyr)
library(shiny)
install.packges("dplyr")
install.packages("dplyr")
install.packages("dplyr")
server = function(input, output){
output$plot = renderPlot({
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(reshape2)
library(ggplot2)
library(ggpubr)
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Activity 6")
load("twdkills.RData")
kills.long = melt(kills, id.vars = "Season",
variable.name = "Characters", value.name  = "nkills")
kills.long[is.na(kills.long)] = 0
ui = fluidPage(
titlePanel("Walking Dead"),
sidebarLayout(
sidebarPanel(uiOutput("CharOutput"),
radioButtons("BarInput","Show Bar Chart", choices = c("Yes","No"),
selected = "No"),
textInput("yInput","Y-axis for line graph","")),
mainPanel(textOutput("nrow"),
br(),
plotOutput("plot"),
br(),
plotOutput("plot2"))
)
)
server = function(input, output){
filtered = reactive({
if(is.null(input$charInput)) return(NULL)
kills.long %>%
filter(Characters %in% input$CharInput) })
output$plot = renderPlot({
if(input$BarInput == "No"){
ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
}
else{
line = ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
bar = ggplot(filtered, aes(x = Characters, y = nkills, group = Characters)) +
geom_bar(stat = "identity", aes(fill = Characters, col = Characters),
position = position_dodge()) +
labs(y=input$yInput) +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(vars(Season),labeller = labeller(Season = c("1" = "Season 1", "2" = "Season 2","3" = "Season 3", "4" = "Season 4", "5" = "Season 5", "6" = "Season 6")))
ggarrange(line, bar, nrow = 2, ncol = 1)
}
})
output$nrow = renderText({
paste0("You have selected ", length(input$CharInput), "characters.")
})
output$CharOutput = renderUI({
checkboxGroupInput("CharInput", "Characters",
choices = unique(kills.long$Characters),
selected = "Rick")
})
}
shinyApp(ui = ui, server = server)
server = function(input, output){
filtered = reactive({
if(is.null(input$CharInput)) return(NULL)
kills.long %>%
filter(Characters %in% input$CharInput) })
output$plot = renderPlot({
if(input$BarInput == "No"){
ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
}
else{
line = ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
bar = ggplot(filtered, aes(x = Characters, y = nkills, group = Characters)) +
geom_bar(stat = "identity", aes(fill = Characters, col = Characters),
position = position_dodge()) +
labs(y=input$yInput) +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(vars(Season),labeller = labeller(Season = c("1" = "Season 1", "2" = "Season 2","3" = "Season 3", "4" = "Season 4", "5" = "Season 5", "6" = "Season 6")))
ggarrange(line, bar, nrow = 2, ncol = 1)
}
})
output$nrow = renderText({
paste0("You have selected ", length(input$CharInput), "characters.")
})
output$CharOutput = renderUI({
checkboxGroupInput("CharInput", "Characters",
choices = unique(kills.long$Characters),
selected = "Rick")
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server = function(input, output){
filtered = reactive({
if(is.null(input$CharInput)) return(NULL)
kills.long %>%
filter(Characters %in% input$CharInput) })
output$plot = renderPlot({
if(is.null(filtered())) {return(NULL)}
if(input$BarInput == "No"){
ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
}
else{
line = ggplot(filtered, aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
bar = ggplot(filtered, aes(x = Characters, y = nkills, group = Characters)) +
geom_bar(stat = "identity", aes(fill = Characters, col = Characters),
position = position_dodge()) +
labs(y=input$yInput) +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(vars(Season),labeller = labeller(Season = c("1" = "Season 1", "2" = "Season 2","3" = "Season 3", "4" = "Season 4", "5" = "Season 5", "6" = "Season 6")))
ggarrange(line, bar, nrow = 2, ncol = 1)
}
})
output$nrow = renderText({
paste0("You have selected ", length(input$CharInput), " characters.")
})
output$CharOutput = renderUI({
checkboxGroupInput("CharInput", "Characters",
choices = unique(kills.long$Characters),
selected = "Rick")
})
}
shinyApp(ui = ui, server = server)
server = function(input, output){
filtered = reactive({
if(is.null(input$CharInput)) return(NULL)
kills.long %>%
filter(Characters %in% input$CharInput) })
output$plot = renderPlot({
if(is.null(filtered())) {return(NULL)}
if(input$BarInput == "No"){
ggplot(filtered(), aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
}
else{
line = ggplot(filtered(), aes(x = Season, y = nkills, group = Characters)) +
geom_line(size = 1, aes(col = Characters)) +
geom_point(size = 1, aes(col = Characters)) +
scale_x_continuous("Season", labels = c("Season 1", "Season 2", "Season 3",
"Season 4", "Season 5", "Season 6"),
breaks = unique(kills.long$Season)) +
labs(y=input$yInput)
bar = ggplot(filtered(), aes(x = Characters, y = nkills, group = Characters)) +
geom_bar(stat = "identity", aes(fill = Characters, col = Characters),
position = position_dodge()) +
labs(y=input$yInput) +
theme(axis.text.x = element_text(angle = 90)) +
facet_wrap(vars(Season),labeller = labeller(Season = c("1" = "Season 1", "2" = "Season 2","3" = "Season 3", "4" = "Season 4", "5" = "Season 5", "6" = "Season 6")))
ggarrange(line, bar, nrow = 2, ncol = 1)
}
})
output$nrow = renderText({
paste0("You have selected ", length(input$CharInput), " characters.")
})
output$CharOutput = renderUI({
checkboxGroupInput("CharInput", "Characters",
choices = unique(kills.long$Characters),
selected = "Rick")
})
}
shinyApp(ui = ui, server = server)
