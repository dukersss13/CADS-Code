ggplot(consolidate.df(), aes(x = consolidate.df()[,3] , y = ..density..)) +
geom_density(aes(color = county, fill = county), alpha = 0.2, size = 0.7) +
labs(x = names(consolidate.df())[3], y = "Density") +
guides(fill = guide_legend(title= "County"),
color = guide_legend(title = "County")) + theme_bw() +
theme(axis.text = element_text(size = 12),
axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 11))
})
# Kendall Coeff Text ####
output$kendall = renderText({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
kd = round(cor(filtered3()[,2],filtered3()[,3],method = "kendall"),4)
paste("Kendall Rank Coefficient:", kd)
})
# t.test1 text ####
output$t_test1 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,2]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect1, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect1, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# t.test2 text ####
output$t_test2 = renderText({
if(is.null(input$countySelect2)) return(NULL)
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
test = t.test(consolidate.df()[,3]~county,
data = consolidate.df(), paired = FALSE)
if(test$p.value > 0.05){
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that there is no sufficient evidence that the", input$percentSelect2, "between
the two counties are statistically different at a significance level
of 0.05.")
} else{
paste("The P-value of the 2-sample t-test is:", round(test$p.value,2), "which suggests
that the", input$percentSelect2, "between the two counties are
statistically different at a significance level of 0.05.")
}
})
# Pearson Scatter Plot ####
output$correlation = renderPlot({
if(is.null(input$percentSelect1)) return(NULL)
if(is.null(input$percentSelect2)) return(NULL)
if(is.null(input$countySelect3)) return(NULL)
ggplot(filtered3(), aes(x = filtered3()[,2], y = filtered3()[,3])) +
geom_point(size = 3, color = "#56B4E9") +
geom_smooth(method = "lm", se = F, size = 0.8, color = "black") +
labs(title = paste("Police-Civilian Use of Force in", input$countySelect3),
subtitle = paste("with Pearson Correlation:", round(cor(filtered3()[,2],filtered3()[,3]),4)),
x = names(filtered3()[2]), y = names(filtered3()[3])) +
theme_bw() +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14),
plot.title = element_text(size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 13, hjust = 0.5))
})
# Kendall Matrix ####
output$corrMatrix = renderPlot({
if(is.null(input$countySelect3)) return(NULL)
filtered4 = data %>%
filter(county %in% input$countySelect3) %>%
select(-county)
filtered4 = filtered4[, colSums(filtered4 != 0) > 0]
ggcorrplot(cor(filtered4[1:as.integer(length(filtered4)/2)],
filtered4[as.integer(length(filtered4)/2+1):length(filtered4)],
method = "kendall"),
hc.order = T, lab= T,
ggtheme = ggplot2::theme_light, outline.color = "white",
title = paste("Police(x) - Civilian(y) Violence in", input$countySelect3,
"\n (Kendall Rank Correlation Matrix)"),
colors = c("#6D9EC1", "white", "#E46726"),
legend.title = "Kendall Correlation") +
theme(plot.title = element_text(hjust = 0.5))
})
}
shinyApp(ui = ui, server = server)
M = 9000
sd = 260
n = 169
?t.test
?confint
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Module2 Publish')
library(pROC)
library(dplyr)
library(MASS)
library(AER)
library(ROSE)
library(pROC)
library(mlbench)
library(foreign)
d = get(data(BostonHousing))
dim(d)
names(d)
threshold = mean(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
base = glm(medv~., data = d, family = "binomial")
threshold = mean(medv)
threshold = median(medv)
d$medv = ifelse(d$medv >= threshold, 1, 0)
head(d)
attach(d)
base = glm(medv~., data = d, family = "binomial")
final1 = stepAIC(base)
summary(final1)
paste0(round(exp(summary(final1)$coef[,1]),3))
paste0(round(((exp(summary(final1)$coef[,1]))-1)*100,3),"%")
round(exp(summary(final1)$coef[,1]),3)
pp1 = predict(final1, type = "response")
predicted.values = predict(final1, d$medv)
roc.curve(medv, pp1)
predicted.values = predict(final1, d)
predicted.values
predicted.values = predict(final1, d$medv)
predicted.values = predict(final1, d$medv)
str(d$medv)
predicted.values = predict(final1, as.factor(d$medv))
predicted.values
predicted.values = predict(pp1, as.factor(d$medv))
roc.curve(medv, pp1)
roc = roc.curve(medv, pp1)
names(roc)
roc$thresholds
roc$Call
roc$auc
roc$false.positive.rate
max(roc$true.positive.rate)
index(max(roc$true.positive.rate) & min(roc$false.positive.rate))
roc$true.positive.rate
roc$false.positive.rate
c = cbind(roc$true.positive.rate, roc$false.positive.rate)
c
c %>% filter(max(c[,1]) & min(c[,2]))
which.max(roc$true.positive.rate - roc$false.positive.rate)
roc$thresholds[55]
best_threshold_index = which.max(roc$true.positive.rate - roc$false.positive.rate)
optimal.threshold = roc$thresholds[best_threshold_index]
install.packages("ANN2")
svmPoly = train(isFraud~., data = train.smote, method = "svmPoly", trControl = train.control)
library(shiny); runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
runApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 2/Group Module 2 v2.R')
library(dplyr)
library(MASS)
library(AER)
library(ROSE)
library(pROC)
library(mlbench)
library(foreign)
d = get(data(BostonHousing))
View(d)
str(d)
quantile(d$medv, c(0.25, 0.75))
q = quantile(d$medv, c(0.25, 0.75))
q[1]
14>q[1]
for (i in d$medv){
if (i < q[1]){
i = 0
} else if(i >= q[1] & i <= q[2]){
i = 1
} else{ i = 2}
}
View(d)
for i in d$medv print(i)
?mutate
View(d)
q[1]
q[2]
q[1] * 12
d2 = d %>%
mutate(d$medv, d$medv < p[1], 0)
d2 = d %>%
mutate(medv, medv < p[1], 0)
d$medv[d$medv < p[1]] == 0
d2 = d %>%
mutate(medv, medv < q[1], 0)
View(d2)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv[d$medv < q[1]] = 0
d$medv[d$medv >= q[1] & d$medv <= q[2]] = 1
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv[d$medv < q[1]] = 0
d$medv = ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2)
d$medv = as.factor(d$medv)
str(d)
table(d$medv)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv < q[2], 1, 2), 0)
View(d)
table(d$medv)
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] && d$medv < q[2], 1, 2), 0)
table(d$medv)
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2), 0)
table(d$medv)
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2), 0)
table(d$medv)
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
table(d$medv)
library(nnet)
install.packages("VGAM")
library(nnet)
fit.nnet = multinom(medv~., data = d)
coef(fit.nnet)
summary(fit.nnet)
library(VGAM)
fit.vgam = vglm(medv~., data = d)
fit.vgam = vglm(medv~., multinomial(refLevel = 0), data = d)
fit.vgam = vglm(medv~., multinomial(refLevel = 1), data = d)
fit.vgam@coefficients
summary(fit.vgam)
fit.vgam2 = vgam(medv~., data = d)
fit.vgam2 = vgam(medv~., multionomial(refLevel = 1), data = d)
fit.vgam2 = vgam(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vgam2)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
summary(fit.nnet)
summary(fit.vglm)
summary(fit.vglm)
View(d)
fit.vglm = vglm(medv~., multinomial(refLevel = 2), data = d)
summary(fit.vglm)
fit.vglm = vglm(medv~., multinomial(refLevel = 3), data = d)
summary(fit.vglm)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
summary(fit.vglm)
library(dplyr)
library(MASS)
library(VGAM)
library(mlbench)
rm(list = ls())
d = get(data(BostonHousing))
str(d)
q = quantile(d$medv, c(0.25, 0.75))
d$medv = ifelse(d$medv < q[1], 0, ifelse(d$medv >= q[1] & d$medv <= q[2], 1, 2))
table(d$medv)
fit.vglm = vglm(medv~., multinomial(refLevel = 1), data = d)
summary(fit.vglm)
# Looking at the summary of the coefficients, we can eliminate variables that aren't statistically
# significant to simplify the model such as: crim, zn, indus, cha1. Since my reference level = 1,
# these variables don't contribute much to the log odds of being between the 25th&75th percentile
# Similarly, they aren't significant when it comes to predicting the log odds of being above the
# 75th percentile.
install.packages("lmer")
install.packages("mler")
install.packages(c("tibble", "tseries"))
install.packages("mler")
install.packages("lmer")
install.packages("lme4")
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Class Work/Group Module 3")
data = read.csv("politeness_data.csv")
data = read.csv("politeness_data.csv")
View(data)
library(lme4)
model1 = lmer(frequency~1 + (1|gender) + (1|attitude), data = data)
summary(model1)
model2 = lmer(frequency~ subject + (subject|attitude), data = data)
summary(model2)
model3 = lmer(frequency~gender+attitude + (1|scenario) + (1|subject), data = data)
summary(model3)
summary(model1)
View(data)
summary(model1)
(76.39)/(76.39+12.66)
names(mmodel)
names(model1)
attributes(model1)
summary(model1)
sigmaB = 76.39
sigmaW = 12.66
model1.ICC = sigmaB/(sigmaB + sigmaW)
model1.ICC = round(sigmaB/(sigmaB + sigmaW),3)
model1.ICC
sigmaW = 35.68
model1.ICC = round(sigmaB/(sigmaB + sigmaW),3)
model1.ICC
names(model1)
model1.ICC = round(sigmaB/(sigmaB + sigmaW),3)
model1.ICC
summary(model1)
gender.sigmaB = 76.39
sigmaW = 35.68
model1.ICC = round(gender.sigmaB/(gender.sigmaB + sigmaW),3)
model1.ICC
model1.gender.ICC = round(gender.sigmaB/(gender.sigmaB + sigmaW),3)
model1.gender.ICC
model1
cc = coef(model1)[[1]]
pred = apply(cc,1,function(z) z[1] + z[2]*0:9)
predvec = c(pred)
predvec
pred
c
cc
model1
summary(model1)
gender.sigmaB = 5834.9
sigmaW = 1272.8
model1.gender.ICC = round(gender.sigmaB/(gender.sigmaB + sigmaW),3)
model1.gender.ICC
var.ICC = function(sigmaB, sigmaW){
return(round(sigmaB/(sigmaB + sigmaW),3))
}
model1.gender.ICC = var.ICC(gender.simaB, sigmaW)
var.ICC = function(sigmaB, sigmaW){
return(round(sigmaB/(sigmaB + sigmaW),3))
}
gender.sigmaB = 5834.9
sigmaW = 1272.8
model1.gender.ICC = var.ICC(gender.simaB, sigmaW)
model1.gender.ICC = var.ICC(gender.sigmaB, sigmaW)
model1.gender.ICC
model1.attitude.ICC = var.ICC(attitude.sigmaB, sigmaW)
attitude.sigmaB = 160.4
model1.attitude.ICC = var.ICC(attitude.sigmaB, sigmaW)
model1.attitude.ICC
model2
conft(model2)
confint(model2)
model2
install.packages("lmerTest")
library(lmerTest)
data = read.csv("politeness_data.csv")
# Random intercept model with subject as the random effect and gender + attitude as predictor variables.
model1 = lmer(frequency~1 + (1|gender) + (1|attitude), data = data)
summary(model1)
model2 = lmer(frequency~ subject + (subject|attitude), data = data)
summary(model2)
# Random intercept model with subject and scenario as the random effects and gender + attitude as
# predictor variables. Still have gender + attitude as predictor variables.
model3 = lmer(frequency~gender+attitude + (1|scenario) + (1|subject), data = data)
summary(model3)
var.ICC = function(sigmaB, sigmaW){
return(round(sigmaB/(sigmaB + sigmaW),3))
}
gender.sigmaB = 5834.9
sigmaW = 1272.8
model1.gender.ICC = var.ICC(gender.sigmaB, sigmaW)
model1.gender.ICC
attitude.sigmaB = 160.4
model1.attitude.ICC = var.ICC(attitude.sigmaB, sigmaW)
model1.attitude.ICC
model2
lmerTest(model2)
model2 = lmerTest::lmer(frequency~ subject + (subject|attitude), data = data)
summary(model2)
model2$call
model2
model2 = lmerTest::lmer(frequency~ subject + (subject|attitude), data = data)
summary(model2)
model2
summary(model2)
# There is statistical significance when looking at the fixed effects of subjectM3, M7 & the Intercept
summary(aov(model2))
# There is statistical significance when looking at the fixed effects of subjectM3, M7 & the Intercept
summary(aov(model1))
# There is statistical significance when looking at the fixed effects of subjectM3, M7 & the Intercept
aov(model2)
# There is statistical significance when looking at the fixed effects of subjectM3, M7 & the Intercept
aov(anova(model2))
summary(model3)
summary(model1)
summary(model3)
u0sq = data.frame(VarCorr(model1))[1,4]
u0sq
u1sq = data.frame(VarCorr(model1))[2,4]
u01 = data.frame(VarCorr(model1))[3,4]
uwsq = data.frame(VarCorr(model1))[4,4]
u0sq
u1sq
u01
uwsq
x = seq(min(sleepstudy$Days), max(sleepstudy$Days),length.out=100)
VPC = (u0sq + 2*u01*x +u1sq*x^2)/(u0sq + 2*u01*x +u1sq*x^2 + uw)
x
uwsq = data.frame(VarCorr(model1))[4,4]
x = seq(min(sleepstudy$Days), max(sleepstudy$Days),length.out=100)
VPC = (u0sq + 2*u01*x +u1sq*x^2)/(u0sq + 2*u01*x +u1sq*x^2 + uw)
u01
VarCorr(model1)
data.frame(VarCorr(model1))
x = data.frame(VarCorr(model1))
x1[1,4]
x[1,4]
x[4,4]
x[3,4]
x
u0sq = data.frame(VarCorr(model1))[1,4]
u1sq = data.frame(VarCorr(model1))[2,4]
# = data.frame(VarCorr(model1))[3,4]
uwsq = data.frame(VarCorr(model1))[3,4]
model2 = lmerTest::lmer(frequency~ subject + (subject|attitude), data = data,
na.action = na.exclude)
summary(model2)
u0sq = data.frame(VarCorr(model1))[1,4]
u1sq = data.frame(VarCorr(model1))[2,4]
data.frame(VarCorr(model1))
data.frame(VarCorr(model2))
u0sq = data.frame(VarCorr(model1))[1,4]
u1sq = data.frame(VarCorr(model1))[2,4]
model1
VarCorr(model1)
data.frame(VarCorr(model1))
require(DAAG)
require(ggplot2)
require(lme4)
require(dplyr)
################################################
head(ant111b)
###Random slope model
sleep.lmer2 = lmer(Reaction ~ Days + (Days|Subject),data = sleepstudy, na.action = na.exclude)
cc = coef(sleep.lmer2)[[1]]
pred = apply(cc,1,function(z) z[1] + z[2]*0:9)
predvec = c(pred)
sleepstudy$pred  = predvec
###Results of best sleep model
summary(sleep.lmer2)
g = data.frame(VarCorr(sleep.lmer2))
g
summary(sleep.lmer2)
# Problem 3 ####
anova(model1, model2, model3)
AIC(model1, model2, model3)
# Problem 3 ####
anova(model1, model2, model3, REML = F)
# Problem 3 ####
anova(model1, model2, model3, ML = F)
# Problem 3 ####
anova(model1, model2, model3, REML = F)
AIC(model1, model2, model3)
# Problem 3 ####
m1 = lmer(frequency~1 + (1|gender) + (1|attitude), data = data, REML = F)
anova(m1, model2, model3)
AIC(model1, model2, model3)
library(MASS)
# Problem 4 ####
model1
# Problem 4 ####
VarCorr(model1)
plot(model1)
plot(model2)
# Problem 3 ####
m1 = lmer(frequency~1 + (1|gender) + (1|attitude), data = data, REML = F)
m2 = lmerTest::lmer(frequency~ subject + (subject|attitude), data = data,
na.action = na.exclude, REML = F)
m3 = lmer(frequency~gender+attitude + (1|scenario) + (1|subject), data = data, REML = F)
anova(m1, m2, m3)
AIC(m1, m2, m3)
install.packages("sjPlot")
# Problem 4 ####
model1
model2
# Problem 4 ####
r = unlist(ranef(model2)$attitude)
plot(density(r))
kde2d(density(r))
kde2d(r)
plot(density(r))
model1
# Problem 4 ####
r1 = unlist(ranef(model2))
plot(density(r))
plot(density(r1))
# Problem 4 ####
r1 = unlist(ranef(model1))
plot(density(r1))
r2 = unlist(ranef(model2))
kde2d(r2)
plot(density(r2))
r3 = unlist(ranef(model3))
plot(density(r3))
