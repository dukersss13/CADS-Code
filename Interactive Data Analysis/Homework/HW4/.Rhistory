install.packages(c("backports", "broom", "callr", "classInt", "concaveman", "data.table", "dbplyr", "dendextend", "devtools", "dplyr", "DT", "ellipsis", "FKF", "foreach", "forecast", "fs", "gganimate", "ggforce", "ggplot2", "git2r", "glmnet", "glue", "gower", "gplots", "grpreg", "gtools", "haven", "htmltools", "httpuv", "httr", "isoband", "janitor", "jsonlite", "knitr", "later", "libcoin", "lmtest", "locfit", "lubridate", "magick", "modelr", "openssl", "padr", "pillar", "pkgbuild", "pkgload", "plotly", "pls", "processx", "promises", "ps", "purrr", "quantmod", "raster", "rayrender", "rayshader", "Rcpp", "RcppArmadillo", "Rdpack", "recipes", "remotes", "reshape2", "rex", "rgdal", "rgl", "riingo", "rlang", "rmarkdown", "roxygen2", "rversions", "rvest", "scales", "sf", "shape", "shiny", "sp", "SQUAREM", "stringi", "sys", "tibble", "tidyquant", "tidyr", "tidyselect", "timetk", "tinytex", "TSA", "TSP", "TTR", "units", "usethis", "V8", "vctrs", "withr", "xfun", "xml2", "xts", "zip", "zoo"))
library(tibble)
install.packages("tibble")
install.packages("tibble")
install.packages(c("stringi", "TSA"))
library(tibble)
install.packages("tibble")
library(dplyr)
library(dbplyr)
install.packages("tibble")
install.packages("dplyr")
library(dplyr)
install.packages("stringi")
library(rmarkdown)
install.packages(c("rmarkdown", "knitr"))
HW.SRNE30 = Holt(SRNE, 30)
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SRNE = closing[[3]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
data(wcgs)
data(wcgs.dta)
## Problem 1)
m1 = c(79, 66, 57, 91, 42, 59)
m2 = c(71, 43, 58, 78, 20, 56)
data(wcgs)
library(foreign, lib.loc = "C:/Program Files/R/R-3.6.3/library")
install.packages("foreign")
fake_wcgs <- data.frame("Ppl" = c(1:8),
"Weights" = c(100,102,110,140,174,189,298,592),
"Group" = c(0,1,2,3,0,1,2,3))
fake_wcgs <- data.frame("Ppl" = c(1:8),
"Weights" = c(100,102,110,140,174,189,298,592),
"Group" = c(0,1,2,3,0,1,2,3))
fake_wcgs = data.frame("Ppl" = c(1:8),
"Weights" = c(100,102,110,140,174,189,298,592),
"Group" = c(0,1,2,3,0,1,2,3))
g0 <- fake_wcgs[,2][which(fake_wcgs[,3]==0)]
g1 <- fake_wcgs[,2][which(fake_wcgs[,3]==1)]
g2 <- fake_wcgs[,2][which(fake_wcgs[,3]==2)]
g3 <- fake_wcgs[,2][which(fake_wcgs[,3]==3)]
View(fake_wcgs)
fake_wcgs <- data.frame("Ppl" = c(1:12),
"Weights" = c(100,102,110,140,174,189,298,592,182,103,173,246),
"Group" = c(0,1,2,3,0,1,2,3,0,1,2,3))
g0 <- fake_wcgs[,2][which(fake_wcgs[,3]==0)]
g1 <- fake_wcgs[,2][which(fake_wcgs[,3]==1)]
g2 <- fake_wcgs[,2][which(fake_wcgs[,3]==2)]
g3 <- fake_wcgs[,2][which(fake_wcgs[,3]==3)]
barlett.test(Weights~Group, fake_wcgs)
bartlett.test(Weights~Group, fake_wcgs)
#2c)
anova(fake_wcgs)
#2c)
anova(fake_wcgs)
?lm
#2c)
anova(lm(Weights~Group, fake_wcgs))
anov <- aov(fake_wcgs$weight ~ fake_wcgs$group)
anov <- aov(fake_wcgs$Weights ~ fake_wcgs$Group)
anov
p_val_anov <- summary(anov)[[1]][["Pr(>F)"]][[1]]
anov <- aov(Weights ~ Group)
p_val_anov <- summary(anov)[[1]][["Pr(>F)"]][[1]]
p_val_anov
anov <- aov(Weights ~ Group)
p_val_anov <- summary(anov)[[1]][["Pr(>F)"]][[1]]
p_val_anov
anov
p_val_anov
#2c)
anova(lm(Weights~Group, fake_wcgs))
#2c)
anovaTest = anova(lm(Weights~Group, fake_wcgs))
p_val_anov = summary(anovaTest)[[1]][["Pr(>F)"]][[1]]
p_val_anov = summary(anovaTest)[[1]][["Pr(>F)"]]
p_val_anov = summary(anovaTest)[[1]]
p_val = summary(anovaTest)[[1]]
p_val
anovaTest
p_val[["Pr(>F)"]]
p_val["Pr(>F)"]
anovaTest$`Pr(>F)`
anovaTest$`Pr(>F)`[1]
anovaTest$'Pr(>F)'[1]
anovaTest$'Pr(>F)'[1]
anovaTest$`Mean Sq`/anovaTest$`Sum Sq`
anovaTest
51217/15672
bonf_pw_tt = pairwise.t.test(fake_wcgs$weight, fake_wcgs$group, p.adj = "bonf")
bonf_pw_tt = pairwise.t.test(fake_wcgs$Weights, fake_wcgs$Group, p.adj = "bonf")
bonnf_pw_tt
bonf_pw_tt
TukeyHSD(anovaTest)
j = aov(lm(Weights~Group, fake_wcgs))
TukeyHSD(j)
j = aov(lm(Weights~Group, data = fake_wcgs))
TukeyHSD(j)
j = lm(Weights~Group, data = fake_wcgs)
TukeyHSD(aov(j))
fake_wcgs <- data.frame("Ppl" = c(1:12),
"Weights" = c(100,102,110,140,174,189,298,592,182,103,173,246),
"Group" = c(0,1,2,3,0,1,2,3,0,1,2,3))
#2c)
anovaTest = anova(lm(Weights~Group, fake_wcgs))
anovaTest
anovaTest$'Pr(>F)'[1]
bonf_pw_tt = pairwise.t.test(fake_wcgs$Weights, fake_wcgs$Group, p.adj = "bonf")
bonf_pw_tt
HSD.test(anovaTest)
aov(Weights~Group, fake_wcgs)
av.lm = lm(av)
av = aov(Weights~Group, fake_wcgs)
av.lm = lm(av)
TukeyHSD(av.lm)
av = lm(Weights~Group, fake_wcgs)
av.lm = aov(av)
TukeyHSD(av.lm)
av = lm(Weights, fake_wcgs)
av.lm = aov(av)
TukeyHSD(av.lm)
kruskal.test(Weights~Group, data = fake_wcgs)
wilcox.test(fake_wcgs$Weights, fake_wcgs$Group, p.adj = "bonf")
#2a)
shapiro.test(fake_wcgs$Weights)
#2a)
shapiro.test(Weights~Group, fake_wcgs)
fake_wcgs$Weights
#2a)
shapiro.test(fake_wcgs$Weights)
?shapiro
?shapiro.test
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
SRNE = closing[[3]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[1]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
SRNE = closing[[4]]
acf(SRNE)
pacf(SRNE)
SRNE30 = arimaFunction(SRNE, 30)
SRNE30
HW.SRNE30 = Holt(SRNE, 30)
HW.SRNE30
WKHS = closing[[1]]
acf(SRNE)
WKHS = closing[[1]]
acf(WKHS)
pacf(WKHS)
WKHS30 = arimaFunction(WKHS, 30)
WKHS30
HW.WKHS30 = Holt(WKHS, 30)
HW.WKHS30
WKHS30 = arimaFunction(WKHS, 30)
WKHS30
library(TSA)
library(forecast)
library(tidyverse)
library(sarima)
arimaFunction = function(data, n){
model = auto.arima(data)
model
#auto.arima confirms that the data set needs to be differenced once.
#It provides the best ARIMA model with AR(2), MA(2) & d = 1.
print(checkresiduals(model))
#The residuals show the data set with difference = 1.
futurePrice = forecast(model, h = n)
return(futurePrice)
}
Holt = function(data,n){
par(mfrow = c(1,1))
HW = HoltWinters(data, gamma = FALSE)
prediction = forecast(HW, h = n)
plot(HW)
print(HW$alpha)
print(HW$beta)
return(prediction)
}
#Lastly, I want to analyze Inovio & Co-Diagnostics stocks.
library(quantmod)
stocks_list = c("WKHS", "SHLL", "SRNE", "SQ", "TSLA")
for (i in stocks_list){
getSymbols(i,from = "2020-01-01", to = Sys.Date())
}
stocks = list(WKHS, SHLL, SRNE, SQ, TSLA)
closing = lapply(stocks, function(s) {
return(s[, 4])
})
WKHS = closing[[1]]
acf(WKHS)
pacf(WKHS)
WKHS30 = arimaFunction(WKHS, 30)
WKHS30
HW.WKHS30 = Holt(WKHS, 30)
HW.WKHS30
WKHS30 = arimaFunction(WKHS, 30)
WKHS30
library(dplyr)
data(starwars)
data(starwars)
force(starwars)
View(starwars)
# Problem 1 ####
names(starwars)
table(starwars$species)
table1 = starwars %>%
filter(table(species) > 1)
spec = table(starwars$species)
spec
spec[13]
spec[13] > 1
table(starwars$species)
table1 = starwars %>%
for (i in spec){
if (i >= 3){
filter(i)
}
}
print(i)
for (i in spec){
print(i)
}
table1 = starwars %>%
group_by(species) %>%
filter(n() >=3)
View(table1)
spec
print(table1)
names(starwars)
# Problem 2 ####
characters = starwars %>%
filter(names)
characters = starwars$name
planets = starwars$homeworld
type = starwars$species
planets = starwars$homeworld
table(starwars$homeworld,starwars$species)
freq = table(starwars$homeworld,starwars$species)
?frequency
freq = frequency(table(starwars$homeworld,starwars$species))
freq
freq
freq = table(starwars$homeworld,starwars$species)
freq
mytable = table(starwars$homeworld,starwars$species)
margin.table(mytable, 1)
ftable(mytable, 1)
mytable
paste(type, planets)
mytable = table(combo)
combo = paste(type, planets)
mytable = table(combo)
mytable
?max
sort(mytable, decreasing = TRUE)
top3 = sort(mytable, decreasing = TRUE)[1:3]
top3
?dplyr
a.top3 = sort(mytable, decreasing = TRUE)[1:3]
a.top3
b.top3 = starwars %>%
group_by(combo)
b.top3 = starwars %>%
group_by(type, planets)
b.top3 = starwars %>%
group_by(species, homeworld)
b.top3
View(b.top3)
b.top3 = starwars %>%
group_by(species, homeworld) %>%
summarise(
n = n()
)
b.top3 = starwars %>%
group_by(species, homeworld) %>%
summarise(
n = n()
)
View(b.top3)
b.top3 = starwars %>%
group_by(species, homeworld) %>%
summarise(
n = n(),
arrange(desc(n))
)
b.top3 = starwars %>%
group_by(species, homeworld) %>%
summarise(
n = n()
) %>%
arrange(desc(n))
a.top3
b.top[1:3]
b.top3[1:3]
b.top3[,1:3]
b.top3[,1:3]
b.top3[1,3]
b.top3[1:,3]
b.top3[1:3,]
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW4")
library(DAAG)
data(possum)
attach(possum)
names(possum)
# Problem 1 ####
?hist
# Problem 1 ####
hist1 = hist(age)
?hist
hist2 = hist(age, breaks = seq(0,9,1.5))
# Problem 1 ####
hist1 = hist(age)
hist2 = hist(age, breaks = seq(0,9,1.5))
# Problem 1 ####
hist1 = hist(age)
# Problem 1 ####
hist1 = hist(age)
hist2 = hist(age, breaks = seq(0,9,1.5))
# Problem 1 ####
hist1 = hist(age)
hist2 = hist(age, breaks = seq(0,9,1.5))
# Problem 1 ####
hist1 = hist(age)
# Problem 1 ####
hist1 = hist(age)
hist2 = hist(age, breaks = seq(0,9,1.5))
age
plot(density(age))
plot(density(x = age))
?density
plot(density(c(age)))
plot(density(age))
age
density(age)
type(age)
class(age)
c(age)
age
plot(density(age))
plot(density(age, na.rm = T))
hist(age)
plot(density(age, na.rm = T))
# Problem 2 ####
names(possum)
# Problem 2 ####
boxplot(earconch)
earconch
?boxplot
# Problem 2 ####
boxplot(earconch)
main("Graf :)")
# Problem 2 ####
boxplot(earconch)
main("Graf :)")
# Problem 2 ####
boxplot(earconch, main("Graf :)")
# Problem 2 ####
boxplot(earconch, main("Graf :)")
# Problem 2 ####
boxplot(earconch, main ="Graf :)")
# Problem 2 ####
boxplot(earconch, main ="GRAF :)")
# Problem 2 ####
boxplot(earconch, main = "graf :)")
# Problem 2 ####
boxplot(earconch, main = "graf :]")
# Problem 2 ####
boxplot(earconch, main = "graf xD")
# Problem 2 ####
boxplot(earconch, main = "graf :D")
# Problem 2 ####
boxplot(earconch, xlim = c(0,100))
# Problem 2 ####
boxplot(earconch, xlim = c(0,10))
# Problem 2 ####
boxplot(earconch, xlim = c(0,20))
# Problem 2 ####
boxplot(earconch, xlim = c(0,40))
# Problem 2 ####
boxplot(earconch, ylim = c(0,40))
# Problem 2 ####
boxplot(earconch, ylim = c(0,10))
min(eearconch)
min(earconch)
max(earconch)
# Problem 2 ####
boxplot(earconch, ylim = c(40,60))
# Problem 2 ####
boxplot(earconch, xlim = c(0,10), ylim = c(40,60))
# Problem 2 ####
boxplot(earconch, xlim = c(0,5), ylim = c(40,60))
# Problem 2 ####
boxplot(earconch, ylim = c(40,60))
# Problem 2 ####
boxplot(earconch)
# Problem 2 ####
boxplot(earconch, xlab = "Hi")
# Problem 2 ####
boxplot(earconch, xtick = c(0,10))
# Problem 2 ####
boxplot(earconch~sex)
# Problem 2 ####
hist(earconch)
# Problem 2 ####
hist(earconch~sex)
# Problem 2 ####
hist(earconch)
boxplot(earconch~sex)
names(possum)
case
site
library(dplyr)
# Problem 3 ####
data = select(possum, -case, -site)
data
plot(data)
scatter(data)
str(data)
# Problem 3 ####
data = select(possum, -case, -site, -Pop, -sex)
plot(data)
names(data)
plot(skullw, hdlngth)
?pch
plot(skullw, hdlngth, pch = mean(x))
plot(skullw, hdlngth, pch = mean(skullw))
?pch
plot(skullw, hdlngth, pch = mean(skullw), col = "r")
plot(skullw, hdlngth, pch = mean(skullw), col = r)
plot(skullw, hdlngth, pch = mean(skullw), col = 'red')
plot(skullw, hdlngth, pch = mean(skullw, hdlngth), col = 'red')
plot(skullw, hdlngth)
points(x=mean(skullw),y=mean(hdlngth),col="red",pch=17,cex=1.5)
?RMarkdown
