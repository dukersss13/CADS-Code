legend.key.size = unit(0.02, "cm"))
ggplot(data = df.2, mapping = aes(x = x, y = value)) +
geom_line(aes(group = variable, color = variable)) +
geom_point(size = 2, alpha = 0.6, aes(color = variable)) +
labs(x = "Iteration Offset from A", y = "Mean Value") +
scale_colour_manual(name = "Pos",
values = c("green", "blue", "red")) +
theme(legend.direction = "horizontal", legend.position = c(0.1,0.98),
legend.key.size = unit(0.02, "cm"))
vv
vv$diagconfig
vv$diagconfig[1,]
library(MASS)
library(ggplot2)
data(mpg)
head(mpg)
mpg.var = (mpg['cty'] + mpg['hwy'])/2
mpg = cbind(mpg, mpg.var)
names(mpg)[12] = 'avg.mpg'
drop = c("cty","hwy")
df = mpg[,!(names(mpg) %in% drop)]
dim(df)
names(df)
summary(df)
str(df)
attach(df)
hist(displ, freq = F)
hist(year, freq = F)
hist(cyl, freq = F)
boxplot(avg.mpg ~ cyl)
boxplot(avg.mpg ~ manufacturer)
boxplot(avg.mpg ~ trans)
boxplot(avg.mpg ~ model)
boxplot(avg.mpg ~ manufacturer)
mlm = lm(avg.mpg ~., data = df)
stepAIC(mlm)
best.lm = lm(model + displ + year + cyl + fl + class, data = df)
plot(best.lm, which = c(1))
best.lm = lm(model + displ + year + cyl + fl + class, data = df)
best.lm = lm(avg.mpg~ model + displ + year + cyl + fl + class, data = df)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello"))
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("participants", "Participants ID",
choices = c(1:50)))
),
mainPanel(textOutput("Hello")
)
)
library(dplyr)
library(shiny)
install.packges("dplyr")
install.packages("dplyr")
install.packages("dplyr")
server = function(input, output){
output$plot = renderPlot({
})
}
shinyApp(ui = ui, server = server)
m1 = 190
m1 = 190, m2 = 275
m1 = 190
m2 = 275
n = 45
multinominCL
?multinominCL
?multinominCI
?multinomCI
t.test(x1$x1, conf.level = 0.95)
# Problem 2 ####
# Pg268 5.20 ####
library(ellipse)
m1 = 190
m2 = 275
n = 45
x1 = data.frame("x1" = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188))
x2 = data.frame("x2" = c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258))
x1bar = mean(x1[,1])
x2bar = mean(x2[,1])
cor.coeff = cor(cbind(x1,x2))
plot(ellipse(cor.coeff))
t.test(x1$x1, conf.level = 0.95)
?t.test
confint(x1$x1)
confint(x1)
t.test(x1$x1, method = 'bonferroni')
install.packages("multcomp")
library(multcomp)
?simint
??simint
simint(x1)
?t.test
t.test(x1$x1, conf.level = 0.95)
t.test(x2$x2, conf.level = 0.95)
# 2b ####
tail_t.test = t.test(x1$x1, conf.level = 0.95)
names(tail_t.test)
tail_t.test$conf.int
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int)
paste0("The 95% T^2 conf. interval for x1 is ", tail_t.test$conf.int[[1]])
paste0("The 95% T^2 conf. interval for x1 is [", tail_t.test$conf.int[[1]],",",
tail_t.test$conf.int[[2]],"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],4),",",
round(tail_t.test$conf.int[[2]],4),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing.t.test = t.test(x2$x2, conf.level = 0.95)
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3))
wing_t.test = t.test(x2$x2, conf.level = 0.95)
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3))
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("THe 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
confint(x1$x1)
confint(x1[,1])
c1 = x1$x1
c1
confint(c1)
type(c1)
class(c1)
str(c1)
typeof(c1)
c1
list(c1)
typeof(c1)
c1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
c1
confint(c1)
?confint
t.test(x1$x1, conf.level = 0.95, method = 'bonferroni')
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
confint(x1)
install.packages("popKorn")
library(popKorn)
bonferroniIntervals(x1$x1, alpha = 0.05)
bonferroniIntervals(x1$x1, alpha = 0.05, k = 1)
bonferroniIntervals(x1$x1, alpha = 0.05, k = 2)
bonferroniIntervals(x1, alpha = 0.05, k = 1)
bonferroniIntervals(x1, alpha = 0.05)
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
# 2c ####
plot(lm(x2~x1))
# 2c ####
plot(lm(x2$x2~x1$x1))
# 2c ####
plot(lm(x2$x2~x1$x1), which = c(2))
# 2c ####
plot(lm(x2$x2~x1$x1), which = 2)
x1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
x2 =  c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258)
x1bar = mean(x1)
x2bar = mean(x2)
cor.coeff = cor(cbind(x1,x2))
View(cor.coeff)
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1$x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2$x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
# Problem 2 ####
# Pg268 5.20 ####
library(ellipse)
library(popKorn)
m1 = 190
m2 = 275
n = 45
x1 = c(191, 197, 208, 180, 188, 180,210,196,191,179,208,202,200,192,199,186,197,201,190,
209,187,207,178,202,205,190,189,211,216,189,173,194,198,180,190,191,196,207,209,
179,186,174,181,189,188)
x2 =  c(284,285,288,273,275,280,283,288,271,257,289,285,272,282,280,266,285,295,
282,305,285,297,268,271,285,280,277,310,305,274,271,280,300,272,292,286,285,
286,303,261,262,245,250,262,258)
x1bar = mean(x1)
x2bar = mean(x2)
cor.coeff = cor(cbind(x1,x2))
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),",",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),",",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
# No difference between the 2 intervals for x2 but x1's T^2 Interval is within
# x1's Bonf. Interval
# 2c ####
plot(lm(x2$x2~x1$x1), which = 2)
# 2c ####
plot(lm(x2~x1), which = 2)
# Problem 2 ####
# Pg268 5.20
library(ellipse)
library(popKorn)
library(foreign)
library(dplyr)
m1 = 190
m2 = 275
n = 45
q2.data = read.table("T5-12.dat")
x1 = q2.data$V1
x2 = q2.data$V2
x1bar = mean(x1)
x2bar = mean(x2)
S = cov(q2.data)
S.inv = solve(S)
cor.coeff = cor(cbind(x1,x2))
# 2a ####
plot(ellipse(cor.coeff))
# 2b ####
tail_t.test = t.test(x1, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),", ",
round(tail_t.test$conf.int[[2]],3),"]")
wing_t.test = t.test(x2, conf.level = 0.95)
paste0("The 95% T^2 conf. interval for x1 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
paste0("The 95% T^2 conf. interval for x1 is [", round(tail_t.test$conf.int[[1]],3),", ",
round(tail_t.test$conf.int[[2]],3),"]")
paste0("The 95% T^2 conf. interval for x2 is [", round(wing_t.test$conf.int[[1]],3),", ",
round(wing_t.test$conf.int[[2]],3),"]")
bonferroniIntervals(cbind(x1,x2), alpha = 0.05)
plot(x1, x2)
library(dplyr)
library(shiny)
library(reshape2)
library(ggplot2)
library(lubridate)
library(rsconnect)
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6")
load("HW6Data.Rdata")
attach(medtn)
newDate = date(medtn$date)
newTime = hour(logged_at_local) + minute(logged_at_local)/60
medtn = cbind(medtn, newDate, newTime)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("IDInput", "Participants ID",
choices = unique(medtn$ID),
selected = "1"),
uiOutput("DateOutput")),
mainPanel(plotOutput("plot", brush = brushOpts("plotBrush")),
textOutput("plotBrush_info"),
textOutput("favorite"))
)
)
server = function(input, output){
filtered = reactive({
medtn %>%
filter(ID %in% input$IDInput)
})
output$plot = renderPlot({
ggplot(filtered(), aes(x = date(date), y = hour(logged_at_local) + minute(logged_at_local)/60)) +
geom_point(size = 3, aes(shape = session_type, color = duration_in_sec/60)) +
scale_y_continuous(breaks = seq(0,24,4),
labels=c("12AM","4AM","8AM","12PM","4PM","8PM","12AM")) +
scale_color_gradient(low = "yellow", high = "red", "Duration (min)") +
scale_shape_manual(values=c(16,17,15,3,7,8,10), "Activity Type") +
labs(x = "Date", y = "Start Time")
})
output$DateOutput = renderUI({dateRangeInput("DateInput", "Date Range",
start  = date(min(filter(medtn, ID %in% input$IDInput)$date)),
end    = date(max(filter(medtn, ID %in% input$IDInput)$date)),
format = "yyyy-mm-dd",
separator = " to ")
})
output$plotBrush_info = renderText({
brushedData = brushedPoints(filtered(), input$plotBrush, xvar = "newDate", yvar = "newTime")
if(is.null(brushedData)) return("Please click and drag on the graph to select data.")
paste0("There are ", nrow(brushedData), " observations selected. The average duration is ",
round(mean(brushedData$duration_in_sec)/60,2), " mins.")
})
output$favorite = renderText({
paste0("Participant ", unique(filtered()$ID), "'s favorite program is ", max(filtered()$program_title),".")
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='dukerss13',
token='7C4A653E7C7FE999C19233DD0AEA9361',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
token='7C4A653E7C7FE999C19233DD0AEA9361',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
token='7C4A653E7C7FE999C19233DD0AEA9361',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
token='7C4A653E7C7FE999C19233DD0AEA9361',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
+                           token='7C4A653E7C7FE999C19233DD0AEA9361',
+                           secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='dukerss13',
+                           token='7C4A653E7C7FE999C19233DD0AEA9361',
+                           secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
+                           token='7C4A653E7C7FE999C19233DD0AEA9361',
+                           secret='<SECRET>')
rsconnect::setAccountInfo(name='dukerss13',
token='7C4A653E7C7FE999C19233DD0AEA9361',
secret='<SECRET>')
library(dplyr)
library(shiny)
library(reshape2)
library(ggplot2)
library(lubridate)
library(rsconnect)
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6")
load("HW6Data.Rdata")
attach(medtn)
newDate = date(medtn$date)
newTime = hour(logged_at_local) + minute(logged_at_local)/60
medtn = cbind(medtn, newDate, newTime)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("IDInput", "Participants ID",
choices = unique(medtn$ID),
selected = "1"),
uiOutput("DateOutput")),
mainPanel(plotOutput("plot", brush = brushOpts("plotBrush")),
textOutput("plotBrush_info"),
textOutput("favorite"))
)
)
server = function(input, output){
filtered = reactive({
medtn %>%
filter(ID %in% input$IDInput)
})
output$plot = renderPlot({
ggplot(filtered(), aes(x = date(date), y = hour(logged_at_local) + minute(logged_at_local)/60)) +
geom_point(size = 3, aes(shape = session_type, color = duration_in_sec/60)) +
scale_y_continuous(breaks = seq(0,24,4),
labels=c("12AM","4AM","8AM","12PM","4PM","8PM","12AM")) +
scale_color_gradient(low = "yellow", high = "red", "Duration (min)") +
scale_shape_manual(values=c(16,17,15,3,7,8,10), "Activity Type") +
labs(x = "Date", y = "Start Time")
})
output$DateOutput = renderUI({dateRangeInput("DateInput", "Date Range",
start  = date(min(filter(medtn, ID %in% input$IDInput)$date)),
end    = date(max(filter(medtn, ID %in% input$IDInput)$date)),
format = "yyyy-mm-dd",
separator = " to ")
})
output$plotBrush_info = renderText({
brushedData = brushedPoints(filtered(), input$plotBrush, xvar = "newDate", yvar = "newTime")
if(is.null(brushedData)) return("Please click and drag on the graph to select data.")
paste0("There are ", nrow(brushedData), " observations selected. The average duration is ",
round(mean(brushedData$duration_in_sec)/60,2), " mins.")
})
output$favorite = renderText({
paste0("Participant ", unique(filtered()$ID), "'s favorite program is ", max(filtered()$program_title),".")
})
}
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name="dukerss13", token="7C4A653E7C7FE999C19233DD0AEA9361", secret="VwFRHX3wPHbKPKs4SQEf1mjUsTty6xEJxidKHuHY")
rsconnect::deployApp('path/to/your/app')
rsconnect::deployApp('')
rsconnect::deployApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6')
rsconnect::deployApp('C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6')
load("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6/HW6Data.Rdata")
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6")
load("hw6data.Rdata")
attach(medtn)
attach(medtn)
load("hw6data.Rdata")
attach(medtn)
library(dplyr)
library(shiny)
library(reshape2)
library(ggplot2)
library(lubridate)
#library(rsconnect)
setwd("C:/Users/Duker/Desktop/Fall 2020/CS 614/Homework/HW6")
load("hw6data.Rdata")
attach(medtn)
newDate = date(medtn$date)
newTime = hour(logged_at_local) + minute(logged_at_local)/60
medtn = cbind(medtn, newDate, newTime)
ui = fluidPage(
titlePanel("Meditation Data"),
sidebarLayout(
sidebarPanel(selectInput("IDInput", "Participants ID",
choices = unique(medtn$ID),
selected = "1"),
uiOutput("DateOutput")),
mainPanel(plotOutput("plot", brush = brushOpts("plotBrush")),
textOutput("plotBrush_info"),
textOutput("favorite"))
)
)
server = function(input, output){
filtered = reactive({
medtn %>%
filter(ID %in% input$IDInput)
})
output$plot = renderPlot({
ggplot(filtered(), aes(x = date(date), y = hour(logged_at_local) + minute(logged_at_local)/60)) +
geom_point(size = 3, aes(shape = session_type, color = duration_in_sec/60)) +
scale_y_continuous(breaks = seq(0,24,4),
labels=c("12AM","4AM","8AM","12PM","4PM","8PM","12AM")) +
scale_color_gradient(low = "yellow", high = "red", "Duration (min)") +
scale_shape_manual(values=c(16,17,15,3,7,8,10), "Activity Type") +
labs(x = "Date", y = "Start Time")
})
output$DateOutput = renderUI({dateRangeInput("DateInput", "Date Range",
start  = date(min(filter(medtn, ID %in% input$IDInput)$date)),
end    = date(max(filter(medtn, ID %in% input$IDInput)$date)),
format = "yyyy-mm-dd",
separator = " to ")
})
output$plotBrush_info = renderText({
brushedData = brushedPoints(filtered(), input$plotBrush, xvar = "newDate", yvar = "newTime")
if(is.null(brushedData)) return("Please click and drag on the graph to select data.")
paste0("There are ", nrow(brushedData), " observations selected. The average duration is ",
round(mean(brushedData$duration_in_sec)/60,2), " mins.")
})
output$favorite = renderText({
paste0("Participant ", unique(filtered()$ID), "'s favorite program is ", max(filtered()$program_title),".")
})
}
shinyApp(ui = ui, server = server)
